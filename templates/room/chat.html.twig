{% extends 'room/base.html.twig' %}
{% block javascripts %}
    <script>
        let lastUpdate;
        {% if room.updatedAt is not null %}
            lastUpdate = new Date("{{ room.updatedAt|date('c') }}");
        {% else %}
            console.error('room.updatedAt is not a valid date');
        {% endif %}
    </script>
    <script>
        const eventSource = new EventSource("{{ mercure("https://example.com/books/%s"|format(room.id|trans))|escape('js') }}");

        eventSource.onmessage = event => {
            const data = JSON.parse(event.data);
            console.log(data);
            const chatList = document.getElementById('chat-list');
            const chatItem = document.createElement('li');
            chatItem.classList.add('chat-item');
            chatItem.innerHTML = `<strong>${data.author}</strong> : ${data.message}`;
            chatList.appendChild(chatItem);
        }

        function checkMessages(){
            const stories = {{ stories|json_encode|raw }}
            console.log(stories)
            if (stories.length > 0) {
                stories.forEach(message => {
                    addStoryMessages(message.story);
                    updateChoices(message.choices);
                });
            } else {
                initStory();
            }
        }

        function addStoryMessages(message){
            const storyMessagesList = document.getElementById('story-list');
            const storyItem = document.createElement('p');
            storyItem.classList.add('bg-gray-300', 'p-6' ,'mb-32', 'shadow-md', 'text-gray-800');
            storyItem.innerHTML = `${message}`;
            storyMessagesList.appendChild(storyItem);
        }

        function updateChoices(choices){
            console.log(choices);
            const choicesList = document.getElementById('choices-list');
            choicesList.innerHTML = '';
            choices.forEach(choice => {
                const choiceItem = document.createElement('li');
                choiceItem.classList.add('w-full', 'flex', 'gap-2', 'relative', 'rounded', 'overflow-hidden', 'bg-gray-200', 'px-3', 'py-1');
                choiceItem.innerHTML = `
                                <input id="${choice.id}" type="radio" name="voteInput"/>
                                <label for="${choice.id}" class="truncate" le="${choice.choiceText}">${choice.choiceText}</label>
                            `;
                choicesList.appendChild(choiceItem);
            });
        }

        function checkTimeout() {
            const voteTimeout = {{ room.timer }} * 1000; // Convert voteTimeout to milliseconds
            const now = new Date(); // Get current time as Date object

            const elapsedTime = now - lastUpdate; // Calculate elapsed time in milliseconds

            if (elapsedTime > voteTimeout) {
                console.log('Vote timeout');
                getChrono(voteTimeout);
            } else {
                console.log('Vote in progress');
                getChrono(elapsedTime);
            }
        }

        function getChrono(elapsedTime) {
            let remainingTime = elapsedTime;

            const timer = setInterval(() => {
                if (remainingTime <= 0) {
                    clearInterval(timer);
                    updateVote();
                } else {
                    const minutes = Math.floor((remainingTime / 1000) / 60);
                    const seconds = Math.floor((remainingTime / 1000) % 60);
                    const milliseconds = remainingTime % 1000;
                    const timerText = document.getElementById('timer-text');
                    timerText.innerText = minutes + ':' + (seconds < 10 ? '0' : '') + seconds + ':' + (milliseconds < 100 ? '0' : '') + milliseconds;
                    remainingTime -= 100; // Decrease remainingTime by 100 milliseconds
                }
            }, 100); // Check remaining time every 100 milliseconds
        }

        function sendVote(e) {
            e.preventDefault();
            const checkedInput = document.querySelector('input[name="voteInput"]:checked');
            const submitButton = document.getElementById('submitInput');

            if (checkedInput) {
                const checkedInputId = checkedInput.id;
                submitButton.disabled = true;
                console.log({{ room.id }}, checkedInputId)
                fetch("{{ path('app_send_vote') }}", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    body: JSON.stringify({"roomId" : "{{ room.id }}", "choiceId" : checkedInputId})
                })
                    .then(response => {
                        if(response.status !== 200){
                            throw new Error('Failed to send message');
                        }
                    })
            } else {
                console.log('No input is checked');
            }
        }

        function updateVote() {
            fetch("{{ path('app_update_vote') }}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                },
                body: JSON.stringify({"roomId" : "{{ room.id }}"})
            })
                .then(response => {
                    if(response.status !== 200){
                        throw new Error('Failed to send message');
                    }
                    return response.json();
                })
                .then(content => {
                    console.log(content);
                    addStoryMessages(content.story);
                    updateChoices(content.choices);
                    checkTimeout();
                })
        }

        function initStory() {
            console.log('Init story');
            fetch("{{ path('app_init_story') }}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                },
                body: JSON.stringify({"roomId" : "{{ room.id }}"})
            })
                .then(response => {
                    if(response.status !== 200){
                        throw new Error('Failed to send message');
                    }
                    return response.json();
                })
                .then(content => {
                    console.log(content);
                    addStoryMessages(content.story);
                    updateChoices(content.choices);
                })
        }

        document.addEventListener("DOMContentLoaded", function () {
            const submitButton = document.getElementById('submit-button');
            const messageInput = document.getElementById('message-input');
            const form = document.getElementById("voteForm");
            let isSent = false;

            checkMessages();

            checkTimeout();

            const sendMessage = () => {
                const message = messageInput.value;
                if(isSent || !message){
                    return;
                }
                isSent = true;
                fetch("{{ path('app_chat') }}", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    body: JSON.stringify({
                        "roomId" : "{{ room.id }}",
                        "message" : message,
                        "author" : "{{ app.user.username }}"
                    })
                })
                    .then(response => {
                        if(response.status !== 200){
                            isSent = false;
                            throw new Error('Failed to send message');
                        }
                    })
                    .then(data => {
                        messageInput.value = '';
                        isSent = false;
                    })
            };

            submitButton.addEventListener('click', sendMessage);

            form.addEventListener('submit', sendVote);

            messageInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    sendMessage();
                }
            });
        });
    </script>
{% endblock %}

{% block title %}Hello ChatController!{% endblock %}

{% block body %}
    <div class="flex">
        <div class="flex flex-col w-2/3 p-16 pt-32" id="story-list"></div>
        <div class="flex flex-col justify-end fixed right-0 h-dvh w-1/3 border px-4 pt-16 pb-4 gap-2 bg-white">
            <form
                id="voteForm"
                class="absolute flex overflow-hidden top-16 left-0 right-0  mx-3 my-2 h-64 bg-white rounded shadow-around shadow-slate-800"
            >
                <span class="h-full w-3 bg-slate-900"></span>
                <div class="flex flex-col w-full p-2 gap-3">
                    <div class="flex">
                        <div class="flex flex-col w-3/4">
                            <p class="text-sm text-gray-500">Current vote</p>
                            <h3 class="font-semibold text-xl text-gray-950">What should we do ?</h3>
                        </div>
                        <div class="w-1/4 flex items-center justify-center">
                            <h3 class="p-2 bg-slate-900 rounded font-semibold text-white text-xl"
                                id="timer-text"
                            >
                                00:00
                            </h3>
                        </div>
                    </div>
                    <ul class="flex flex-col gap-2 w-full" id="choices-list">
                        <li>
                            <input id="draft" class="peer/draft" type="radio" name="status" checked />
                            <label for="draft" class="peer-checked/draft:bg-sky-500">Draft</label>
                        </li>
                        <li>
                            <input id="published" class="peer/published" type="radio" name="status" />
                            <label for="published" class="peer-checked/published:bg-sky-500">Published</label>
                        </li>
                        <li>
                            <input id="published" class="peer/published" type="radio" name="status" />
                            <label for="published" class="peer-checked/published:bg-sky-500">Published</label>
                        </li>
                    </ul>
                    <div>
                        <input class="w-full p-2 bg-green-300 rounded text-white" type="submit" value="Vote" id="submitInput">
                    </div>
                </div>
            </form>
            <ul class="flex flex-col gap-1 h-full justify-end overflow-hidden" id="chat-list"></ul>
            <div class="flex items-center rounded gap-2 h-10">
                <input type="text" id="message-input" placeholder="Type your message here" class="h-full p-2 bg-slate-100 rounded flex-1">
                <button id="submit-button" class="flex items-center justify-center h-10 w-10 p-1 bg-green-300 rounded text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path fill="currentColor" d="M16.175 13H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8l-1.425-1.4z"/></svg>
                </button>
            </div>
        </div>
    </div>
{% endblock %}
